{
  "active": false,
  "connections": {
    "Code in JavaScript1": {
      "main": [
        [
          {
            "index": 0,
            "node": "Switch1",
            "type": "main"
          }
        ]
      ]
    },
    "Create a file": {
      "main": [
        [
          {
            "index": 0,
            "node": "Loop Over Items1",
            "type": "main"
          }
        ]
      ]
    },
    "Get a file1": {
      "main": [
        [
          {
            "index": 0,
            "node": "Merge1",
            "type": "main"
          }
        ]
      ]
    },
    "Get many workflows1": {
      "main": [
        [
          {
            "index": 0,
            "node": "Loop Over Items1",
            "type": "main"
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "index": 1,
            "node": "Merge1",
            "type": "main"
          },
          {
            "index": 0,
            "node": "Get a file1",
            "type": "main"
          }
        ],
        [
          {
            "index": 0,
            "node": "Replace Me1",
            "type": "main"
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "index": 0,
            "node": "Code in JavaScript1",
            "type": "main"
          }
        ]
      ]
    },
    "Replace Me1": {
      "main": [
        [
          {
            "index": 0,
            "node": "Loop Over Items1",
            "type": "main"
          }
        ]
      ]
    },
    "Schedule Trigger1": {
      "main": [
        [
          {
            "index": 0,
            "node": "Variables1",
            "type": "main"
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "index": 0,
            "node": "Loop Over Items1",
            "type": "main"
          }
        ],
        [],
        [
          {
            "index": 0,
            "node": "Create a file",
            "type": "main"
          }
        ]
      ]
    },
    "Variables1": {
      "main": [
        [
          {
            "index": 0,
            "node": "Get many workflows1",
            "type": "main"
          }
        ]
      ]
    }
  },
  "isArchived": false,
  "name": "Back up errores",
  "nodes": [
    {
      "credentials": {
        "githubApi": {
          "id": "0oW4lU9Qr31YmzID",
          "name": "GitHub account"
        }
      },
      "name": "Create a file",
      "parameters": {
        "commitMessage": "=feat(n8n): add {{ $json[\"filePath\"] }}",
        "fileContent": "={{ $json[\"n8n_data_stringy\"] }}",
        "filePath": "={{ $json[\"filePath\"] }}",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "joelrandolifarrando-hash"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "n8n_back"
        },
        "resource": "file"
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "webhookId": "6c02b6cd-2487-43dd-b220-a966bcd42cda"
    },
    {
      "name": "Schedule Trigger1",
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 12
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2
    },
    {
      "name": "Variables1",
      "parameters": {
        "jsonOutput": "{\n  \"repo\": {\n    \"owner\": \"joelrandolifarrandoli-hash\",\n    \"name\": \"n8n_back\",\n    \"branch\": \"main\",\n    \"path\": \"workflows\"\n  }\n}\n",
        "mode": "raw",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4
    },
    {
      "credentials": {
        "n8nApi": {
          "id": "6ZQnv1rWnE7tteZ3",
          "name": "n8n account"
        }
      },
      "name": "Get many workflows1",
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1
    },
    {
      "name": "Loop Over Items1",
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3
    },
    {
      "name": "Replace Me1",
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1
    },
    {
      "name": "Merge1",
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2
    },
    {
      "name": "Code in JavaScript1",
      "parameters": {
        "jsCode": "// === Helpers ===\nfunction isObject(v){ return v && typeof v === 'object' && !Array.isArray(v); }\nfunction looksLikeWorkflow(o){ return o && isObject(o) && Array.isArray(o.nodes) && isObject(o.connections); }\n\nfunction tryParseBase64Json(s){\n  try {\n    const txt = Buffer.from(String(s).replace(/\\s+/g,''), 'base64').toString('utf8');\n    return JSON.parse(txt);\n  } catch { return null; }\n}\n\nfunction tryParseJson(s){\n  try { return JSON.parse(s); } catch { return null; }\n}\n\nfunction findWorkflowDeep(obj){\n  const stack = [{v: obj, p: '$'}];\n  while (stack.length){\n    const {v,p} = stack.pop();\n    if (looksLikeWorkflow(v)) return {wf: v, path: p};\n    if (Array.isArray(v)) v.forEach((el,i)=> stack.push({v: el, p: `${p}[${i}]`}));\n    else if (isObject(v)) for (const [k,val] of Object.entries(v)) stack.push({v: val, p: `${p}.${k}`});\n  }\n  return {wf: null, path: null};\n}\n\n// normalización ligera (quita campos volátiles y ordena claves)\nconst VOLATILE_TOP = new Set(['id','createdAt','updatedAt','versionId','meta','hash','staticData']);\nconst VOLATILE_NODE = new Set(['id','createdAt','updatedAt','position','notes','notesInFlow']);\nfunction deepSort(obj){\n  if (Array.isArray(obj)) return obj.map(deepSort);\n  if (!isObject(obj)) return obj;\n  const out = {};\n  for (const k of Object.keys(obj).sort()) out[k] = deepSort(obj[k]);\n  return out;\n}\nfunction stripVolatile(wf){\n  if (!wf || !isObject(wf)) return wf;\n  const c = JSON.parse(JSON.stringify(wf));\n  for (const k of VOLATILE_TOP) delete c[k];\n  if (Array.isArray(c.nodes)){\n    c.nodes = c.nodes.map(n=>{\n      const nn = {...n};\n      for (const k of VOLATILE_NODE) delete nn[k];\n      if (nn.credentials && isObject(nn.credentials)) nn.credentials = deepSort(nn.credentials);\n      if (nn.parameters) nn.parameters = deepSort(nn.parameters);\n      return nn;\n    });\n  }\n  return deepSort(c);\n}\nfunction same(a,b){ return JSON.stringify(a) === JSON.stringify(b); }\n\nfunction slug(s){\n  return String(s||'workflow')\n    .normalize('NFD').replace(/[\\u0300-\\u036f]/g,'')\n    .replace(/[^a-zA-Z0-9-_]+/g,'-')\n    .replace(/-+/g,'-')\n    .replace(/^-|-$/g,'')\n    .toLowerCase();\n}\n\n// === Por item ===\nreturn items.map(item=>{\n  const j = item.json || {};\n\n  // 1) LOCAL: viene del loop \"Get many workflows\" (o anidado tras Merge)\n  let local = j.localWorkflow || j.workflow || (looksLikeWorkflow(j) ? j : null);\n  if (!local){\n    // buscar profundo (por si el Merge dejó el objeto dentro de otra clave)\n    local = findWorkflowDeep(j).wf;\n  }\n  if (!local){\n    return { json: { accion: -1, estado: 'error', mensaje: 'No se detectó workflow LOCAL en el item.', debugKeys: Object.keys(j) } };\n  }\n\n  // 2) REMOTO: viene del nodo \"Get a file\" de GitHub (tras Merge)\n  //   GitHub GET /contents devuelve { content: <base64>, encoding: 'base64', sha, path, ... }\n  let remote = null;\n  let sha = j.sha || null;\n  if (!remote && typeof j.content === 'string' && /base64/i.test(j.encoding||'')) {\n    remote = tryParseBase64Json(j.content);\n  } else {\n    // Si el Merge dejó la respuesta de GitHub bajo otra clave, busca un subobjeto con content+encoding\n    const stack = [{v:j,p:'$'}];\n    while (!remote && stack.length){\n      const {v} = stack.pop();\n      if (v && typeof v === 'object' && !Array.isArray(v)){\n        if (typeof v.content === 'string' && /base64/i.test(v.encoding||'')){\n          const parsed = tryParseBase64Json(v.content);\n          if (looksLikeWorkflow(parsed)) { remote = parsed; sha = v.sha || sha || null; break; }\n        }\n        for (const val of Object.values(v)) stack.push({v:val});\n      }\n    }\n    // fallback: si alguien guardó el JSON como string\n    if (!remote){\n      for (const val of Object.values(j)){\n        if (typeof val === 'string'){\n          const parsed = tryParseJson(val) || tryParseBase64Json(val);\n          if (looksLikeWorkflow(parsed)) { remote = parsed; break; }\n        }\n      }\n    }\n  }\n\n  // 3) Normalizar para comparar\n  const normLocal  = stripVolatile(local);\n  const normRemote = remote ? stripVolatile(remote) : null;\n\n  // 4) Decisión\n  let accion, estado;\n  if (!normRemote){ accion = 2; estado = 'crear'; }\n  else if (same(normLocal, normRemote)){ accion = 0; estado = 'igual'; }\n  else { accion = 1; estado = 'diferente'; }\n\n  // 5) Preparar salida EXACTA que esperan tus nodos GitHub\n  const nombre = slug(local.name || local.id || 'workflow');\n  const filePath = `workflows/${nombre}.json`;\n  const n8n_data_stringy = Buffer.from(JSON.stringify(normLocal, null, 2)).toString('base64');\n\n  return {\n    json: {\n      accion,                 // 0 = no-op, 1 = editar, 2 = crear\n      estado,\n      filePath,               // → Path en GitHub\n      n8n_data_stringy,       // → File Content (Base64)\n      sha: sha || undefined,  // si existe, se usa en \"Edit a file\"\n      payloadToCommit: normLocal\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2
    },
    {
      "name": "Switch1",
      "parameters": {
        "options": {},
        "rules": {
          "values": [
            {
              "conditions": {
                "combinator": "and",
                "conditions": [
                  {
                    "id": "397c9046-5c18-4120-86cb-e36c8c6d1c0b",
                    "leftValue": "={{ $json[\"accion\"] }}",
                    "operator": {
                      "operation": "equals",
                      "type": "number"
                    },
                    "rightValue": 0
                  }
                ],
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                }
              }
            },
            {
              "conditions": {
                "combinator": "and",
                "conditions": [
                  {
                    "id": "4c57f43a-ee59-4a5d-b2b0-7a7ef2c8e66e",
                    "leftValue": "={{$json[\"accion\"]}}",
                    "operator": {
                      "operation": "equals",
                      "type": "number"
                    },
                    "rightValue": 1
                  }
                ],
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                }
              }
            },
            {
              "conditions": {
                "combinator": "and",
                "conditions": [
                  {
                    "id": "2ecb2e0e-af9d-4cce-9d0f-264b33506246",
                    "leftValue": "={{$json[\"accion\"]}}",
                    "operator": {
                      "operation": "equals",
                      "type": "number"
                    },
                    "rightValue": 2
                  }
                ],
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                }
              }
            }
          ]
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2
    },
    {
      "credentials": {
        "githubApi": {
          "id": "0oW4lU9Qr31YmzID",
          "name": "GitHub account"
        }
      },
      "name": "Get a file1",
      "onError": "continueRegularOutput",
      "parameters": {
        "additionalParameters": {},
        "asBinaryProperty": false,
        "filePath": "={{ $json[\"filePath\"] }}",
        "operation": "get",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "joelrandolifarrando-hash"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "n8n_back"
        },
        "resource": "file"
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "webhookId": "4877ee34-bc78-45fa-9471-7f325b186b4c"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-09T09:16:49.880Z",
      "projectId": "M3s0TPMuzmMgAN7B",
      "role": "workflow:owner",
      "updatedAt": "2025-09-09T09:16:49.880Z",
      "workflowId": "gCpWThAhPhewWYaK"
    }
  ],
  "tags": [],
  "triggerCount": 0
}